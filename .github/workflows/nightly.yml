name: Nightly

on:
  #schedule:
  #  - cron: "0 1 * * *"
  pull_request

permissions:
  contents: read
  packages: write

jobs:
  commits:
    name: Commits
    runs-on: ubuntu-latest
    outputs:
      numCommits: ${{ steps.numCommits.outputs.commits }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get new commits
        id: numCommits
        run: echo "commits=$(git log --oneline --since '24 hours ago' | wc -l)" >> "$GITHUB_OUTPUT"

  binaries:
    timeout-minutes: 60
    needs: commits
#    runs-on: ${{ matrix.os }}
    runs-on: ubuntu-latest

    #    strategy:
#      fail-fast: true
#      matrix:
#        include:
#          - build: linux
#            os: ubuntu-latest
#            target: x86_64-unknown-linux-musl
#            artifact: metal-nightly-x86_64-unknown-linux-musl
#
#          - build: linux
#            os: ubuntu-latest
#            target: x86_64-unknown-linux-gnu
#            artifact: metal-nightly-x86_64-unknown-linux-gnu
#
#          - build: linux
#            os: ubuntu-latest
#            target: aarch64-unknown-linux-gnu
#            artifact: metal-nightly-aarch64-unknown-linux-gnu
#
#          - build: linux
#            os: ubuntu-latest
#            target: armv7-unknown-linux-gnueabihf
#            artifact: metal-nightly-armv7-unknown-linux-gnueabihf
#
#          - build: macos
#            os: macos-latest
#            target: x86_64-apple-darwin
#            artifact: metal-nightly-x86_64-apple-darwin
#
#          - build: macos
#            os: macos-latest
#            target: aarch64-apple-darwin
#            artifact: metal-nightly-aarch64-apple-darwin
#
#          - build: windows
#            os: windows-latest
#            target: x86_64-pc-windows-msvc
#            artifact: metal-nightly-x86_64-pc-windows-msvc.exe
#
#          - build: windows
#            os: windows-latest
#            target: x86_64-pc-windows-gnu
#            artifact: metal-nightly-x86_64-pc-windows-gnu.exe

    steps:
      - uses: actions/checkout@v4

#      - name: Install Rust
#        uses: dtolnay/rust-toolchain@stable
#        with:
#          targets: ${{ matrix.target }}

      - name: Cache APT packages
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: |
            musl-tools 
            libsqlite3-dev 
            gcc-13 
            gcc-13-aarch64-linux-gnu 
            gcc-aarch64-linux-gnu 
            aarch64-linux-gnu-gcc 
            gcc-arm-linux-gnueabihf
            gcc-mingw-w64-x86-64-win32
            gcc-mingw-w64
          version: 1.0

#      - name: Set up MacOS Cross Compiler
#        uses: Timmmm/setup-osxcross@v2
#        with:
#          osx-version: "12.3"

      - name: Install Rustup targets
        run: rustup target add x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu armv7-unknown-linux-gnueabihf x86_64-pc-windows-msvc x86_64-pc-windows-gnu

      - name: Build Archive
        shell: bash
        run: |
          export SKIP_BUILD_RS=1
          cargo build --release \
            --target x86_64-unknown-linux-gnu \
            --target aarch64-unknown-linux-gnu \
            --target armv7-unknown-linux-gnueabihf \
            --target x86_64-pc-windows-msvc \
            --target x86_64-pc-windows-gnu 
          
          #  --target x86_64-apple-darwin \
          #  --target aarch64-apple-darwin \
          # x86_64-apple-darwin aarch64-apple-darwin
          #OUTPUT_NAME="heavy-metal-notifier-${{ matrix.target }}"
          #if [ ${{ matrix.os }} = "windows-latest" ]; then
          #  OUTPUT_NAME="heavy-metal-notifier.exe"
          #fi
          
          OUTPUT_PATH=staging-directory
          mkdir -p $OUTPUT_PATH
          
          cp target/x86_64-unknown-linux-gnu/release/heavy-metal-notifier $OUTPUT_PATH/x86_64-unknown-linux-gnu
          cp target/aarch64-unknown-linux-gnu/release/heavy-metal-notifier $OUTPUT_PATH/aarch64-unknown-linux-gnu
          cp target/armv7-unknown-linux-gnueabihf/release/heavy-metal-notifier $OUTPUT_PATH/armv7-unknown-linux-gnueabihf
          #cp target/armv7-x86_64-apple-darwin/release/heavy-metal-notifier $OUTPUT_PATH/x86_64-apple-darwin
          #cp target/aarch64-apple-darwin/release/heavy-metal-notifier $OUTPUT_PATH/aarch64-apple-darwin
          cp target/x86_64-pc-windows-msvc/release/heavy-metal-notifier $OUTPUT_PATH/x86_64-pc-windows-msvc.exe
          cp target/x86_64-pc-windows-gnu/release/heavy-metal-notifier $OUTPUT_PATH/x86_64-pc-windows-gnu.exe
          cp deploy/.env.example $OUTPUT_PATH/.env
          
          #PREPARE_DIR=/tmp/heavy-metal-notifier/${{ matrix.artifact }}
          #mkdir -p $PREPARE_DIR
          
          #export SKIP_BUILD_RS=1
          #cargo build --target ${{ matrix.target }} --release
          #cp target/${{ matrix.target }}/release/heavy-metal-notifier $OUTPUT_PATH/${{ matrix.artifact }}
          
          if [ ${{ runner.os }} = "Windows" ]; then
            sha256sum $OUTPUT_PATH/x86_64-pc-windows-msvc.exe > $OUTPUT_PATH/x86_64-pc-windows-msvc.exe.sha256
            sha256sum $OUTPUT_PATH/x86_64-pc-windows-gnu.exe > $OUTPUT_PATH/x86_64-pc-windows-gnu.exe.sha256
          else
            #GENERATED_SHA_256=$(shasum -a 256 $OUTPUT_PATH/aarch64-apple-darwin | awk '{print $1}')
            #echo $GENERATED_SHA_256 > $OUTPUT_PATH/aarch64-apple-darwin.sha256    
          
            #GENERATED_SHA_256=$(shasum -a 256 $OUTPUT_PATH/x86_64-apple-darwin | awk '{print $1}')
            #echo $GENERATED_SHA_256 > $OUTPUT_PATH/x86_64-apple-darwin.sha256    
          
            GENERATED_SHA_256=$(shasum -a 256 $OUTPUT_PATH/armv7-unknown-linux-gnueabihf | awk '{print $1}')
            echo $GENERATED_SHA_256 > $OUTPUT_PATH/armv7-unknown-linux-gnueabihf.sha256    
          
            GENERATED_SHA_256=$(shasum -a 256 $OUTPUT_PATH/aarch64-unknown-linux-gnu | awk '{print $1}')
            echo $GENERATED_SHA_256 > $OUTPUT_PATH/aarch64-unknown-linux-gnu.sha256    
          
            GENERATED_SHA_256=$(shasum -a 256 $OUTPUT_PATH/x86_64-unknown-linux-gnu | awk '{print $1}')
            echo $GENERATED_SHA_256 > $OUTPUT_PATH/x86_64-unknown-linux-gnu.sha256     
          fi
          
          #cp ./deploy/.env.example $PREPARE_DIR/.env
          #cp LICENSE $PREPARE_DIR
          
          #if [ ${{ runner.os }} = "windows-latest" ]; then
          #  CURRENT_DIR=$(pwd)
          #  cd $PREPARE_DIR
            #7z a $CURRENT_DIR/$OUTPUT_PATH/${{ matrix.artifact }}.zip *
          #  sha256sum $CURRENT_DIR/$OUTPUT_PATH/${{ matrix.artifact }} > $CURRENT_DIR/$OUTPUT_PATH/${{ matrix.artifact }}.sha256
          #elif [ ${{ runner.os }} = "macOS" ]; then
          #  CURRENT_DIR=$(pwd)
          #  cd $PREPARE_DIR
          #  #echo $CURRENT_DIR
          #  #echo $PREPARE_DIR
          #  #tar -czvvf $CURRENT_DIR/$OUTPUT_PATH/${{ matrix.artifact }}.tgz *
          #  GENERATED_SHA_256=$(shasum -a 256 $CURRENT_DIR/$OUTPUT_PATH/${{ matrix.artifact }} | awk '{print $1}')
          #  echo $GENERATED_SHA_256 > $CURRENT_DIR/$OUTPUT_PATH/${{ matrix.artifact }}.sha256
          #else
          #  CURRENT_DIR=$(pwd)
          #  cd $PREPARE_DIR
          #  #tar -czvvf $CURRENT_DIR/$OUTPUT_PATH/${{ matrix.artifact }}.tgz *
          #  GENERATED_SHA_256=$(shasum -a 256 $CURRENT_DIR/$OUTPUT_PATH/${{ matrix.artifact }} | awk '{print $1}')
          #  echo $GENERATED_SHA_256 > $CURRENT_DIR/$OUTPUT_PATH/${{ matrix.artifact }}.sha256    
          #fi
          
          #  downloads/metal-nightly-x86_64-apple-darwin
          #            downloads/metal-nightly-x86_64-apple-darwin.sha256
          #            downloads/metal-nightly-aarch64-apple-darwin
          #            downloads/metal-nightly-aarch64-apple-darwin.sha256
      - uses: actions/upload-artifact@v4
        with:
          name: staging
          path: staging-directory
          if-no-files-found: error
          retention-days: 1
          include-hidden-files: true

  release:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: binaries

    steps:
      - uses: actions/checkout@v4

      - name: Download Nightly Build x86_64-unknown-linux-musl
        uses: actions/download-artifact@v4
        with:
          name: staging
          path: staging-directory

#      - name: Download Nightly Build x86_64-unknown-linux-gnu
#        uses: actions/download-artifact@v4
#        with:
#          name: metal-nightly-x86_64-unknown-linux-gnu
#          path: downloads
#
#      - name: Download Nightly Build aarch64-unknown-linux-gnu
#        uses: actions/download-artifact@v4
#        with:
#          name: metal-nightly-aarch64-unknown-linux-gnu
#          path: downloads
#
#      - name: Download Nightly Build armv7-unknown-linux-gnueabihf
#        uses: actions/download-artifact@v4
#        with:
#          name: metal-nightly-armv7-unknown-linux-gnueabihf
#          path: downloads
#
#      - name: Download Nightly Build x86_64-apple-darwin
#        uses: actions/download-artifact@v4
#        with:
#          name: metal-nightly-x86_64-apple-darwin
#          path: downloads
#
#      - name: Download Nightly Build aarch64-apple-darwin
#        uses: actions/download-artifact@v4
#        with:
#          name: metal-nightly-aarch64-apple-darwin
#          path: downloads
#
#      - name: Download Nightly Build x86_64-pc-windows-msvc
#        uses: actions/download-artifact@v4
#        with:
#          name: metal-nightly-x86_64-pc-windows-msvc
#          path: downloads
#
#      - name: Download Nightly Build x86_64-pc-windows-gnu
#        uses: actions/download-artifact@v4
#        with:
#          name: metal-nightly-x86_64-pc-windows-gnu
#          path: downloads

      - uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GH_TOKEN }}
          automatic_release_tag: nightly
          prerelease: false
          title: "Nightly Build"
          files: |
            downloads/metal-nightly-x86_64-unknown-linux-musl
            downloads/metal-nightly-x86_64-unknown-linux-musl.sha256
            downloads/metal-nightly-x86_64-unknown-linux-gnu
            downloads/metal-nightly-x86_64-unknown-linux-gnu.sha256
            downloads/metal-nightly-aarch64-unknown-linux-gnu
            downloads/metal-nightly-aarch64-unknown-linux-gnu.sha256
            downloads/metal-nightly-armv7-unknown-linux-gnueabihf
            downloads/metal-nightly-armv7-unknown-linux-gnueabihf.sha256
            downloads/metal-nightly-aarch64-unknown-linux-gnu
            downloads/metal-nightly-aarch64-unknown-linux-gnu.sha256
            downloads/metal-nightly-x86_64-pc-windows-msvc.exe
            downloads/metal-nightly-x86_64-pc-windows-msvc.exe.sha256
            downloads/metal-nightly-x86_64-pc-windows-gnu.exe
            downloads/metal-nightly-x86_64-pc-windows-gnu.exe.sha256
            downloads/.env
            LICENSE
  docker:
    runs-on: ubuntu-latest
    timeout-minutes: 300
    needs: release

    steps:
      - name: Set vars
        id: vars
        run: |
          echo "VERSION=nightly" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}

      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Build docker images
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./deploy/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            reaper99/heavy-metal-notifier:${{ steps.vars.outputs.VERSION }} 
            ghcr.io/${{ github.repository_owner }}/heavy-metal-notifier:${{ steps.vars.outputs.VERSION }}
