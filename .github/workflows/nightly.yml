name: Nightly

on:
  #schedule:
  #  - cron: "0 1 * * *"
  pull_request

permissions:
  contents: read
  packages: write

jobs:
  commits:
    name: Commits
    runs-on: ubuntu-latest
    outputs:
      numCommits: ${{ steps.numCommits.outputs.commits }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get new commits
        id: numCommits
        run: echo "commits=$(git log --oneline --since '24 hours ago' | wc -l)" >> "$GITHUB_OUTPUT"

  binaries:
    timeout-minutes: 60
    needs: commits
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact: metal-x86_64-unknown-linux-musl

#          - build: linux
#            os: ubuntu-latest
#            target: x86_64-unknown-linux-gnu
#
#          - build: linux
#            os: ubuntu-latest
#            target: aarch64-unknown-linux-gnu
#
#          - build: linux
#            os: ubuntu-latest
#            target: armv7-unknown-linux-gnueabihf
#
#          - build: macos
#            os: macos-latest
#            target: x86_64-apple-darwin
#
#          - build: macos
#            os: macos-latest
#            target: aarch64-apple-darwin
#
#          - build: windows
#            os: windows-latest
#            target: x86_64-pc-windows-msvc

#          - build: windows
#            os: windows-latest
#            target: x86_64-pc-windows-gnu

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - if: ${{ runner.os == 'Linux' }}
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: musl-tools # provides musl-gcc
          version: 1.0
#
#      - name: Install sha256sum on macOS
#        if: runner.os == 'macOS'
#        run: brew install coreutils
##
#      - name: Build
#        uses: actions-rs/cargo@v1
#        with:
#          use-cross: true
#          command: build
#          args: --verbose --release --target ${{ matrix.target }}

      - name: Build Archive
        shell: bash
        run: |
          # Replace with the name of your binary
          OUTPUT_NAME="heavy-metal-notifier-nightly-${{ matrix.target }}"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            OUTPUT_NAME="heavy-metal-notifier-nightly-${{ matrix.target }}.exe"
          fi
          
          OUTPUT_PATH=staging-dir
          mkdir $OUTPUT_PATH

          PREPARE_ALL_OUTPUT_DIR="/tmp/heavy-metal-notifier-build"
          mkdir -p $PREPARE_ALL_OUTPUT_DIR
          
          if [[ -n "$MACOS_ARM64_BUILD" ]]; then
            export SDKROOT=$(xcrun -sdk macosx --show-sdk-path)
            export MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)
          fi
          
          cargo build ${{ matrix.target }} --release
          rm -f  $PREPARE_ALL_OUTPUT_DIR/$OUTPUT_NAME || true
          cp target/${{ matrix.target }}/release/heavy-metal-notifier $PREPARE_ALL_OUTPUT_DIR/$OUTPUT_NAME
          cp deploy/.env.example $PREPARE_ALL_OUTPUT_DIR/.env
          cp LICENSE $PREPARE_ALL_OUTPUT_DIR/LICENSE
          
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a $OUTPUT_PATH/OUTPUT_NAME *
            sha256sum "$dirname.zip" > "$dirname.zip.sha256"
          else [ "${{ matrix.os }}" = "macos-latest" ]; then
            tar -czvvf $OUTPUT_PATH/$OUTPUT_NAME *
            GENERATED_SHA_256=$(shasum -a 256 $OUTPUT_PATH/$OUTPUT_NAME | awk '{print $1}')
            echo $GENERATED_SHA_256 > $OUTPUT_PATH/${OUTPUT_NAME}.sha256
          fi   

      - uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.artifact }}
          path: staging-dir

#      - name: Release
#        uses: softprops/action-gh-release@v2
#        with:
#          tag_name: nightly
#          draft: false
#          prerelease: false
#          generate_release_notes: false
#          token: ${{ secrets.GH_TOKEN }}
#          files: |
#            ${{ env.ASSET }}
#            ${{ env.CHECKSUM }}

#      - name: Upload binaries to release
#        uses: svenstaro/upload-release-action@v2
#        with:
#          repo_token: ${{ secrets.GH_TOKEN }}
#          file: ${{ env.ASSET }}
#          asset_name: ${{ matrix.target }}
#          tag: nightly

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: staging-directory

  release:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: binaries

    steps:
      - uses: actions/checkout@v4
      - name: Download Nightly Build x86_64-unknown-linux-musl
        uses: actions/download-artifact@v4
        with:
          name: heavy-metal-notifier-nightly-x86_64-unknown-linux-musl
          path: downloads
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GH_TOKEN }}"
          automatic_release_tag: "nightly"
          prerelease: false
          title: "Nightly Build"
          files: |
            downloads/heavy-metal-notifier-nightly-x86_64-unknown-linux-musl.tgz
            downloads/heavy-metal-notifier-nightly-x86_64-unknown-linux-musl.tgz.sha256
        id: "automatic_releases"

  docker:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: binaries

    steps:
      - name: Set vars
        id: vars
        run: |
          echo "VERSION=nightly" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}

      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Build docker images
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./deploy/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            reaper99/heavy-metal-notifier:${{ steps.vars.outputs.VERSION }} 
            ghcr.io/${{ github.repository_owner }}/heavy-metal-notifier:${{ steps.vars.outputs.VERSION }}
