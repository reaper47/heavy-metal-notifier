name: Deploy

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: read
  packages: write

jobs:
  binaries:
    name: Build and upload
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl

          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          - build: linux
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu

          - build: linux
            os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf

          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin

          - build: macos
            os: macos-latest
            target: aarch64-apple-darwin

          - build: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc

          - build: windows
            os: windows-latest
            target: x86_64-pc-windows-gnu

    steps:
      - uses: actions/checkout@v4

      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - if: ${{ runner.os == 'Linux' }}
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: |
            musl-tools 
            libsqlite3-dev 
            gcc-13 
            gcc-13-aarch64-linux-gnu 
            gcc-aarch64-linux-gnu 
            aarch64-linux-gnu-gcc 
            gcc-arm-linux-gnueabihf
            gcc-mingw-w64-x86-64-win32
          version: 1.0

      - name: Install Rustup targets
        run: rustup target add ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          OUTPUT_PATH=staging-directory
          mkdir -p $OUTPUT_PATH
          
          FILE_NAME=metal-${{ env.VERSION }}-${{ matrix.target }}
          if [ ${{ runner.os }} = "Windows" ]; then
            FILENAME+=".exe"
          fi
          
          export SKIP_BUILD_RS=1
          cargo build --target ${{ matrix.target }} --release
          cp target/${{ matrix.target }}/release/heavy-metal-notifier $OUTPUT_PATH/$FILE_NAME
          cp ./deploy/.env.example $OUTPUT_PATH/.env
          
          if [ ${{ runner.os }} = "Windows" ]; then
            sha256sum "$OUTPUT_PATH/$FILE_NAME" > "$OUTPUT_PATH/${FILE_NAME}.sha256"
          else
            GENERATED_SHA_256=$(shasum -a 256 $OUTPUT_PATH/$FILE_NAME | awk '{print $1}')
            echo $GENERATED_SHA_256 > $OUTPUT_PATH/$FILE_NAME.sha256    
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: staging-directory
          if-no-files-found: error
          retention-days: 1
          include-hidden-files: true

  release:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: binaries

    steps:
      - uses: actions/checkout@v4

      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Download Nightly Build x86_64-unknown-linux-musl
        uses: actions/download-artifact@v4
        with:
          name: x86_64-unknown-linux-musl
          path: downloads

      - name: Download Nightly Build x86_64-unknown-linux-gnu
        uses: actions/download-artifact@v4
        with:
          name: x86_64-unknown-linux-gnu
          path: downloads

      - name: Download Nightly Build aarch64-unknown-linux-gnu
        uses: actions/download-artifact@v4
        with:
          name: aarch64-unknown-linux-gnu
          path: downloads

      - name: Download Nightly Build armv7-unknown-linux-gnueabihf
        uses: actions/download-artifact@v4
        with:
          name: armv7-unknown-linux-gnueabihf
          path: downloads

      - name: Download Nightly Build x86_64-apple-darwin
        uses: actions/download-artifact@v4
        with:
          name: x86_64-apple-darwin
          path: downloads

      - name: Download Nightly Build aarch64-apple-darwin
        uses: actions/download-artifact@v4
        with:
          name: aarch64-apple-darwin
          path: downloads

      - name: Download Nightly Build x86_64-pc-windows-msvc
        uses: actions/download-artifact@v4
        with:
          name: x86_64-pc-windows-msvc
          path: downloads

      - name: Download Nightly Build x86_64-pc-windows-gnu
        uses: actions/download-artifact@v4
        with:
          name: x86_64-pc-windows-gnu
          path: downloads

      - uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GH_TOKEN }}
          automatic_release_tag: ${{ env.VERSION }}
          prerelease: false
          title: ${{ env.VERSION }}
          files: |
            downloads/metal-${{ env.VERSION }}-x86_64-unknown-linux-musl
            downloads/metal-${{ env.VERSION }}-x86_64-unknown-linux-musl.sha256
            downloads/metal-${{ env.VERSION }}-x86_64-unknown-linux-gnu
            downloads/metal-${{ env.VERSION }}-x86_64-unknown-linux-gnu.sha256
            downloads/metal-${{ env.VERSION }}-aarch64-unknown-linux-gnu
            downloads/metal-${{ env.VERSION }}-aarch64-unknown-linux-gnu.sha256
            downloads/metal-${{ env.VERSION }}-armv7-unknown-linux-gnueabihf
            downloads/metal-${{ env.VERSION }}-armv7-unknown-linux-gnueabihf.sha256
            downloads/metal-${{ env.VERSION }}-x86_64-apple-darwin
            downloads/metal-${{ env.VERSION }}-x86_64-apple-darwin.sha256
            downloads/metal-${{ env.VERSION }}-aarch64-apple-darwin
            downloads/metal-${{ env.VERSION }}-aarch64-apple-darwin.sha256
            downloads/metal-${{ env.VERSION }}-x86_64-pc-windows-msvc.exe
            downloads/metal-${{ env.VERSION }}-x86_64-pc-windows-msvc.exe.sha256
            downloads/metal-${{ env.VERSION }}-x86_64-pc-windows-gnu.exe
            downloads/metal-${{ env.VERSION }}-x86_64-pc-windows-gnu.exe.sha256
            downloads/.env
            LICENSE

  docker:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    timeout-minutes: 300
    needs: release

    steps:
      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install SQLite3 dependencies
        run: sudo apt-get update && sudo apt-get install -y libsqlite3-dev

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}

      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: stable

      - name: Build docker images
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./deploy/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            reaper99/heavy-metal-notifier:${{ env.VERSION }} 
            ghcr.io/${{ github.repository_owner }}/heavy-metal-notifier:${{ env.VERSION }}
